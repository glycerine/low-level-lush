<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
          "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd"[
          <!ENTITY rest "<varname>&amp;rest</varname>">
          <!ENTITY key "<varname>&amp;key</varname>">
          <!ENTITY optional "<varname>&amp;optional</varname>">
          <!ENTITY body "<varname>&amp;body</varname>">
          <!ENTITY aux "<varname>&amp;aux</varname>">
          <!ENTITY allow-other-keys "<varname>&amp;allow-other-keys</varname>">
          <!ENTITY CCL "Clozure CL">
          ]>

<chapter id="installing"><title>Obtaining, Installing, and Running &CCL;</title>
  
  <!-- ============================================================ -->
  <sect1 id="releases"><title>Releases and System Requirements</title>
    
    <para>As of this writing, &CCL; 1.4 is the latest release; it was
    made in October 2009.  For up-to-date information about releases,
    please see <ulink url="http://ccl.clozure.com/"/>.
    </para>

   <para>&CCL; runs on the following platforms:</para>
    <itemizedlist>
      <listitem>
        <para>Linux (x86, x86-64, ppc32, ppc64)</para>
      </listitem>
      <listitem>
        <para>Mac OS X 10.4 and later (x86, x86-64, ppc32, ppc64)</para>
      </listitem>
      <listitem>
	<para>FreeBSD 6.x and later (x86, x86-64)</para>
      </listitem>
      <listitem>
	<para>Solaris (x86, x86-64)</para>
      </listitem>
      <listitem>
	<para>Microsoft Windows XP and later (x86, x86-64)</para>
      </listitem>
    </itemizedlist>

    <!-- ***************************************************** -->
    <sect2 id="linuxppc"><title>LinuxPPC</title> 
      
      <para>&CCL; requires version 2.2.13 (or later) of the Linux
      kernel and version 2.1.3 (or later) of the GNU C library (glibc)
      at a bare minimum.</para>
    </sect2>

    <!-- ***************************************************** -->
    <sect2 id="linuxx86"><title>Linux x86</title> 
    
      <para>
	Because of the nature of Linux distributions, it's difficult
	to give precise version number requirements.  In general, a
	"fairly modern" (no more than 2 or three years old) kernel and
	C library are more likely to work well than older
	versions.</para>
    </sect2>

    <!-- ***************************************************** -->
    <sect2 id="freebsdx86"><title>FreeBSD x86</title>
    <para>&CCL; should run on
    FreeBSD 6.x and 7.x.
    FreeBSD 7 users will need to install the "compat6x" package in order to use
    the distributed &CCL; kernel, which is built on a FreeBSD 6.x system.</para>
    </sect2>

    <!-- ***************************************************** -->
    <sect2 id="macosx"><title>Mac OS X (ppc and x86)</title>

      <para> &CCL; runs under Mac OS X versions 10.4 and later.  Post-1.4
      versions will require at least 10.5.
      </para>

      <para>64-bit versions of &CCL; naturally require 64-bit processors
      (e.g., a G5 or Core 2 processor).  Some early Intel-based Macintoshes
      used processors that don't support
      64-bit operation, so the 64-bit &CCL; will not run on them, although
      the 32-bit &CCL; will.
      </para>
    </sect2>
    <sect2 id="windows"><title>Microsoft Windows</title>
    <para>
      At the moment, the 32-bit &CCL; does not run under 64-bit Windows.
    </para>
    </sect2>
  </sect1>


  <!-- ============================================================ -->
  <sect1 id="obtaining-ccl"><title>Obtaining &CCL;</title>
    <para>There two main ways to obtain &CCL;.  For Mac OS X,
    there are disk images that can be used to install &CCL; in
    the usual Macintosh way. For other OSes, Subversion is the best
    way to obtain &CCL;.  Mac OS X users can also use Subversion
    if they prefer. Tarballs are available for those who prefer them,
    but if you have Subversion installed, it is simpler and more
    flexible to use Subversion than tarballs.
    </para>

    <para> There are three popular ways to use &CCL;: as a
      stand-alone double-clickable application (Mac OS X only), as a
      command-line application, or with Emacs and SLIME. The following
      sections describe these options.</para>

    <!-- ***************************************************** -->
    <sect2 id="obtaining-the-mac-way"><title>The Mac Way</title>
      <para>If you are using Mac OS X then you can install and use
         &CCL; in the usual Macintosh way.  Download and mount a
         disk image, then drag the ccl folder to the Applications folder
	 or wherever you wish.
         After that you can double-click the Clozure CL application found
	 inside the ccl directory.  The disk images are available at
         <ulink url="ftp://clozure.com/pub/release/1.4/"/> </para>

      <para>So that &CCL; can locate its source code, and for other
        reasons explained in
        <xref linkend="Predefined-Logical-Hosts"/>, you keep the
        Clozure CL application
        in the <literal>ccl</literal> directory.  If you use a shell,
        you can set the value of the
        <varname>CCL_DEFAULT_DIRECTORY</varname> environment variable
        to explicitly indicate the location of
        the <literal>ccl</literal> directory. If you choose to do
        that, then the <literal>ccl</literal> directory and the Clozure CL
        application can each be in any location you find
        convenient.</para>
    </sect2>
    

    <!-- ***************************************************** -->
    <sect2 id="obtaining-via-svn"><title>Getting &CCL; with Subversion</title>
      <para>It is very easy to download, install, and build &CCL;
      using Subversion. This is the preferred way to get either the
      latest, or a specific version of &CCL;, unless you prefer
      the Mac Way.  Subversion is a source code control system that is
      in wide use.  Many OSes come with Subversion
      pre-installed. A complete, buildable and runnable set of &CCL;
      sources and binaries can be retrieved with a single Subversion command.
      </para>

      <para>Day-to-day development of &CCL; takes place in an area
      of the Subversion repository known as the trunk.  At most times,
      the trunk is perfectly usable, but occasionally it can be unstable
      or totally broken.  If you wish to live on the 
      bleeding edge, the following command will fetch a copy of the trunk
      for Darwin x86 (both 32- and 64-bit versions):
      </para>

        <programlisting>
          <![CDATA[
svn co http://svn.clozure.com/publicsvn/openmcl/trunk/darwinx86/ccl]]>
        </programlisting>

	<para>
	  To get a trunk &CCL; for another platform, replace
	  "darwinx86" with one of the following names (all versions
	  include both 32- and 64-bit binaries):
	</para>
	<itemizedlist>
	  <listitem><para>darwinx86</para></listitem>
	  <listitem><para>linuxx86</para></listitem>
	  <listitem><para>freebsdx86</para></listitem>
	  <listitem><para>solarisx86</para></listitem>
	  <listitem><para>windows</para></listitem>
	  <listitem><para>linuxppc</para></listitem>
	  <listitem><para>darwinppc</para></listitem>
	</itemizedlist>

	<para>Release versions of &CCL; are intended to be stable.  While
	bugs will be fixed in the release branches, enhancements
	and new features will go into the trunk.  To get the 1.4 release
	of &CCL; type:</para>
        <programlisting>
          <![CDATA[
svn co http://svn.clozure.com/publicsvn/openmcl/release/1.4/darwinx86/ccl]]>
        </programlisting>

        
        <para>The above command will fetch the complete sources and binaries
        for the Darwin x86 build of &CCL;. To get a &CCL; for another platform,
	replace "darwinx86" with one of the following names (all versions
	include both 32- and 64-bit binaries):</para>

        <itemizedlist>
	  <listitem><para>darwinx86</para></listitem>
	  <listitem><para>linuxx86</para></listitem>
	  <listitem><para>freebsdx86</para></listitem>
	  <listitem><para>solarisx86</para></listitem>
	  <listitem><para>windows</para></listitem>
	  <listitem><para>linuxppc</para></listitem>
	  <listitem><para>darwinppc</para></listitem>
        </itemizedlist>

        <para>These distributions contain complete sources and
        binaries. They use Subversion's "externals" features to share
        common sources; the majority of source code is the same across
        all versions.</para> 

        <para>Once the checkout is complete you can build &CCL; by
        running the lisp kernel and executing
        the <literal>rebuild-ccl</literal> function. For
        example:</para>

        <programlisting>
          <![CDATA[
joe:ccl> ./dx86cl64
Welcome to Clozure Common Lisp Version 1.2  (DarwinX8664)!
? (rebuild-ccl :full t)

<lots of compilation output>

  ? (quit)
  joe:ccl>]]>
        </programlisting>

	<para>
	  If you don't have a C compiler toolchain installed,
	  <literal>rebuild-ccl</literal> will not work.  Please
	  refer to <xref linkend="building-ccl-from-source"/> for
	  addtional details.
	</para>
	<sect3 id="Checking-Subversion-Installation"><title>Checking Subversion Installation</title>
      <para>If <literal>svn co</literal> doesn't work, then make sure
      that Subversion is installed on your system.  Bring up a command
      line shell and type:
        <programlisting>
          <![CDATA[
shell> svn]]>
        </programlisting> 
        If Subversion is installed, you will see something like:
        <programlisting>
          <![CDATA[
Type 'svn help' for usage]]>
        </programlisting>
        If Subversion is not installed, you will see something
        like:
        <programlisting>
          <![CDATA[
-bash: svn: command not found]]>
        </programlisting>
        If Subversion is not installed, you'll need to figure out how
        to install it on your OS. You can find information about
        obtaining and installing Subversion at
        the <ulink url="http://subversion.tigris.org/project_packages.html">Subversion
        Packages page</ulink>.</para></sect3>

    </sect2>

    <!-- ***************************************************** -->
    <sect2 id="obtaining-via-tarballs"><title>Tarballs</title>
      <para>Tarballs are available at <ulink
      url="ftp://clozure.com/pub/release/1.4/"/>.  Download and extract
      one on your local disk.  Then edit the &CCL; shell script to set
      the value of <varname>CCL_DEFAULT_DIRECTORY</varname> and start
      up the appropriate &CCL; kernel. See <xref
      linkend="The-ccl-Shell-Script"/> for more information about the
      &CCL; shell scripts.</para>
    </sect2>
  </sect1>

  <!-- ============================================================ -->
  <sect1 id="command-line-setup"><title>Command Line Set Up</title>
    <para>Sometimes it's convenient to use &CCL; from a Unix
      shell command line.  This is especially true when using &CCL;
      as a way to run Common Lisp utilities.</para>

    <!-- ***************************************************** -->
    <sect2 id="The-ccl-Shell-Script"><title>The ccl Shell Script</title>
      <para>&CCL; needs to be able to find the
        <literal>ccl</literal> directory in order to support features
        such as <literal>require</literal> and
        <literal>provide</literal>, access to foreign interface
        information (see <link linkend="The-Interface-Database">The
        Interface Database</link>) and the Lisp build process (see
        <link linkend="Building-CCL">Building &CCL; from its Source
        Code</link>). Specifically, it needs to set up logical
        pathname translations for the <literal>"ccl:"</literal>
        logical host.  If this logical host isn't defined (or isn't
        defined correctly), some things might work, some things might
        not, and it'll generally be hard to invoke and use &CCL;
        productively.</para>

      <para>&CCL; uses the value of the environment variable
        <literal>CCL_DEFAULT_DIRECTORY</literal> to determine the
        filesystem location of the <literal>ccl</literal> directory;
        the ccl shell script is intended to provide a way to
        invoke &CCL; with that environment variable set
        correctly.</para>
      <para>There are two versions of the shell script:
        <literal>"ccl/scripts/ccl"</literal> is used to invoke
        32-bit implementations of &CCL; and
        <literal>"ccl/scripts/ccl64"</literal> is used to invoke
        64-bit implementations.</para>
      <para>To use the script:</para>
      <orderedlist>
	<listitem>
	  <para>Copy the script to a directory that is on your
	  <varname>PATH</varname>.  This is often
	  <literal>/usr/local/bin</literal> or
	  <literal>~/bin</literal>.  It is better to do this than to
	  add <literal>ccl/scripts</literal> to your
	  <varname>PATH</varname>, because the script needs to be edited,
	  and editing it in-place means that Subversion sees the script as
	  modified..</para>
	</listitem>
        <listitem>
          <para>Edit the definition of
            <literal>CCL_DEFAULT_DIRECTORY</literal> near the
            beginning of the shell script so that it refers to
            your <literal>ccl</literal> directory.  Alternately, set
            the value of the <literal>CCL_DEFAULT_DIRECTORY</literal>
            environment variable in your .cshrc, .tcshrc,
            .bashrc,.bash_profile, .MacOSX/environment.plist, or
            wherever you usually set environment variables.  If there
            is an existing definition of the variable, the ccl
            script will not override it.
	  </para>
        </listitem>

        <listitem>
          <para>Ensure that the shell script is executable, for
            example:</para> 
          <para><literal>$ chmod +x
            ~/ccl/ccl/scripts/ccl64</literal></para> 
          <para>This command grants execute permission to the named
            script. If you are using a 32-bit platform, substitute
            "ccl" in place of "ccl64".
            <warning>
	          <para>The above command won't work if you are not the
	            owner of the installed copy of &CCL;. In that case,
	            you can use the "sudo" command like this:</para>
              <para><literal>$ sudo chmod +x
                  ~/ccl/ccl/scripts/ccl64</literal></para>
              <para>Give your password when prompted.</para>
              <para>If the "sudo" command doesn't work, then you are
                not an administrator on the system you're using, and you
                don't have the appropriate "sudo" permissions. In that
                case you'll need to get help from the system's
                administrator.</para>
          </warning></para>
        </listitem>
      </orderedlist>

      <para>Note that most people won't need both
      <literal>ccl</literal> and <literal>ccl64</literal> scripts.
      You only need both if you sometimes run 32-bit &CCL; and
      sometimes run 64-bit &CCL;.  You can rename the script that
      you use to whatever you want.  For example, if you are on a
      64-bit system, and you only use &CCL; in 64-bit mode, then
      you can rename  <literal>ccl64</literal> to
      <literal>ccl</literal> so that you only need to type
      "<literal>ccl</literal>" to run it.</para>

      <para>Once this is done, it should be possible to invoke &CCL;
        by typing <literal>ccl</literal>
        or <literal>ccl64</literal> at a shell prompt:</para>
      <programlisting>
&gt; ccl [args ...]
Welcome to &CCL; Version 1.2 (DarwinPPC32)!
?
      </programlisting>
      
      <para>The ccl shell script passes all of its arguments to the
      &CCL; kernel.  See <xref linkend="Invocation"/> for more
      information about these arguments.  When invoked this way, the
      Lisp should be able to initialize the <literal>"ccl:"</literal>
      logical host so that its translations refer to the
      <literal>"ccl"</literal> directory. To test this, you can call
      <literal>probe-file</literal> in &CCL;'s read-eval-print
      loop:</para>
      <programlisting>
? (probe-file "ccl:level-1;level-1.lisp")  ;returns the physical pathname of the file
#P"/Users/alms/my_lisp_stuff/ccl/level-1/level-1.lisp"
      </programlisting>
    </sect2>

    <!-- ***************************************************** -->
    <sect2 id="Invocation">
	  <title>Invocation</title>
	  <para>Assuming that the shell script is properly installed, it can be used to invoke &CCL; from a shell prompt:
	    <programlisting>
shell&gt;<replaceable>ccl</replaceable> <emphasis>args</emphasis>
	    </programlisting>
	    <literal>ccl</literal> runs a 32-bit session;
	    <literal>ccl64</literal> runs a 64-bit session.
	  </para>
    </sect2>
  </sect1>

  <!-- ============================================================ -->
  <sect1 id="Personal-Customization-with-the-Init-File">
	<title>Personal Customization with the Init File</title>
    <para>By default &CCL; tries to load the file
      <literal>"home:ccl-init.lisp"</literal> or the compiled
      <literal>"home:ccl-init.fasl"</literal> upon starting up.
      &CCL; does this by executing <literal>(load
      "home:ccl-init")</literal>.  If it's unable to load the file
      (for example because the file doesn't exist), &CCL; doesn't
      signal an error or warning, it just completes its startup
      normally.</para>
    <para>
      On Unix systems, if <literal>"ccl-init.lisp"</literal> is not
      present, &CCL; will look for <literal>".ccl-init.lisp"</literal>
      (post 1.2 versions only).
    </para>
    <para>The <literal>"home:"</literal> prefix to the filename is a
      Common Lisp logical host, which &CCL; initializes to refer to
      your home directory. &CCL; therefore looks for either of the
      files
      <literal>~/ccl-init.lisp</literal> or
      <literal>~/ccl-init.fasl</literal>.</para>
    <para>Because the init file is loaded the same way as normal Lisp
      code is, you can put anything you want in it.  For example, you
      can change the working directory, and load packages that you use
      frequently.</para>
    <para>To suppress the loading of this init-file, invoke &CCL; with the
      <literal>--no-init</literal> option.</para>
  </sect1>

  <!-- ============================================================ -->
  <sect1 id="Command-Line-Options">
	<title>Command Line Options</title>
    <para>When using &CCL; from the command line, the following
      options may be used to modify its behavior.  The exact set of
      &CCL; command-line arguments may vary per platform and
      slowly changes over time.  The current set of command line
      options may be retrieved by using the
      <literal>--help</literal> option.</para>
	<itemizedlist>
	  <listitem>
	    <para><literal>-h</literal> (or
	      <literal>--help</literal>).  Provides a definitive (if
	      somewhat terse) summary of the command line options
	      accepted by the &CCL; implementation and then
	      exits.</para>
	  </listitem>

	  <listitem>
	    <para><literal>-V</literal> (or
	      <literal>--version</literal>).  Prints the version of
	      &CCL; then exits.  The version string is the same value
	      that is returned by
	      <function>LISP-IMPLEMENTATION-VERSION</function>.</para>
	  </listitem>

	  <listitem>
	    <para><literal>-K</literal>
	      <parameter>character-encoding-name</parameter> (or
	      <literal>--terminal-encoding</literal>
	      <parameter>character-encoding-name</parameter>).
	      Specifies the character encoding to use for
	      <varname>*TERMINAL-IO*</varname> (see <xref
	                                               linkend="Character-Encodings"/>).  Specifically, the
	      <parameter>character-encoding-name</parameter> string
	      is uppercased and interned in the KEYWORD package. If an
	      encoding named by that keyword exists,
	      <varname>CCL:*TERMINAL-CHARACTER-ENCODING-NAME*</varname> is set to the name
	      of that encoding.   <varname>CCL:*TERMINAL-CHARACTER-ENCODING-NAME*</varname> defaults to <literal>NIL</literal>, which
	      is a synonym for <literal>:ISO-8859-1</literal>.</para>
	    <para>For example:
	      <programlisting>
<![CDATA[shell> ccl -K utf-8]]>
	      </programlisting>
	      has the effect of making the standard CL streams use
	      <literal>:UTF-8</literal> as their character
	      encoding.</para>
	  </listitem>

	  <listitem>
	    <para><literal>-n</literal> (or
	      <literal>--no-init</literal>). If this option is given, the
	      init file is not loaded.  This is useful if &CCL; is being
	      invoked by a shell script that should not be affected by
	      whatever customizations a user might have in place.</para>
	  </listitem>

	  <listitem>
	    <para><literal>-e</literal> <parameter>form</parameter>
	      (or <literal>--eval</literal>). An expression is read (via
	      <function>READ-FROM-STRING</function>) from the string
	      <parameter>form</parameter> and evaluated. If
	      <parameter>form</parameter> contains shell metacharacters,
	      it may be necessary to escape or quote them to prevent the
	      shell from interpreting them.</para>
	  </listitem>

	  <listitem>
	    <para><literal>-l</literal> <parameter>path</parameter>
	      (or <literal>--load</literal>
	      <parameter>path</parameter>). Loads file specified by
	      <parameter>path</parameter>.</para>
	  </listitem>

	  <listitem>
	    <para><literal>-T</literal> <parameter>n</parameter> (or
	      <literal>--set-lisp-heap-gc-threshold</literal>
	      <parameter>n</parameter>).  Sets the Lisp gc threshold to
	      <parameter>n</parameter>. (see <xref
	                                        linkend="GC-Page-reclamation-policy"/></para>
	  </listitem>

	  <listitem>
	    <para><literal>-Q</literal> (or
	      <literal>--quiet</literal>). Suppresses printing of
	      heralds and prompts when the <literal>--batch</literal>
	      command line option is specified.</para>
	  </listitem>

	  <listitem>
	    <para><literal>-R</literal> <parameter>n</parameter> (or
	      <literal>--heap-reserve</literal>). Reserves
	      <parameter>n</parameter> bytes for heap expansion.  The
	      default is <literal> 549755813888</literal>.  (see <xref
	                                                            linkend="Heap-space-allocation"/>)</para>
	  </listitem>

	  <listitem>
	    <para><literal>-S</literal> <parameter>n</parameter> (or
	      <literal>--stack-size</literal> <parameter>n</parameter>). Sets the size of the
	      initial control stack to <parameter>n</parameter>. (see <xref
	                                                                 linkend="Thread-Stack-Sizes"/>)</para>
	  </listitem>

	  <listitem>
	    <para><literal>-Z</literal> <parameter>n</parameter> (or
	      <literal>--thread-stack-size</literal>
	      <parameter>n</parameter>). Sets the size of the first
	      thread's stack to <parameter>n</parameter>. (see <xref
	                                                          linkend="Thread-Stack-Sizes"/>)</para>
	  </listitem>

	  <listitem>
	    <para><literal>-b</literal> (or <literal>--batch</literal>). Execute in "batch mode". End-of-file
	      from <varname>*STANDARD-INPUT*</varname> causes &CCL; to exit, as do attempts to
	      enter a break loop.</para>
	  </listitem>

	  <listitem>
	    <para><literal>--no-sigtrap</literal> An obscure option for running under GDB.</para>
	  </listitem>

	  <listitem>
	    <para><literal>-I</literal>
	      <parameter>image-name</parameter> (or
	      <literal>--image-name</literal>
	      <parameter>image-name</parameter>). Specifies the image
	      name for the kernel to load.  Defaults to the kernel name
	      with ".image" appended.</para>
	  </listitem>
	</itemizedlist>

    <para>The <literal>--load</literal> and
      <literal>--eval</literal> options can each be provided
      multiple times.  They're executed in the order specified on
      the command line, after the init file (if there is one) is
      loaded and before the toplevel read-eval-print loop is
      entered.</para>
  </sect1>

  <!-- ============================================================ -->
  <sect1 id="Using-CCL-with-GNU-Emacs-and-SLIME">
    <title>Using &CCL; with GNU Emacs and SLIME</title>
    <para>
      SLIME (see  <ulink url="http://common-lisp.net/project/slime/">
      the SLIME web page</ulink>) is an Emacs mode for interacting with
      Common Lisp systems.  &CCL; is well-supported by SLIME.
    </para>

    <para>
      See the <ulink url="http://trac.clozure.com/ccl/wiki/InstallingSlime">
      InstallingSlime</ulink> topic on the &CCL; wiki for some tips
      on how to get SLIME running with &CCL;.
    </para>
  </sect1>

  <!-- ============================================================ -->
  <sect1 id="Example-Programs">
    <title>Example Programs</title>
    <para>A number (ok, a <emphasis>small</emphasis> number), of
    example programs are distributed in the "ccl:examples;" directory
    of the source distribution. See the README-OPENMCL-EXAMPLES text
    file in that directory for information about prerequisites and
    usage.</para>
    <para>Some of the example programs are derived from C examples
      in textbooks, etc.; in those cases, the original author and work
      are cited in the source code.</para>
    <para>Unless the original author or contributor claims other
      rights, you're free to incorporate any of this example code or
      derivative thereof in any of your own works without
      restriction. In doing so, you agree that the code was provided
      "as is", and that no other party is legally or otherwise
      responsible for any consequences of your decision to use
      it.</para>
    <para>If you've developed &CCL; examples that you'd like to see
      added to the distribution, please send mail to the &CCL; mailing
      lists. Any such contributions would be welcome and appreciated
      (as would bug fixes and improvements to the existing
      examples.)</para>
  </sect1>
</chapter>
