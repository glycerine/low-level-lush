;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;
;;; LUSH Lisp Universal Shell
;;;   Copyright (C) 2002 Leon Bottou, Yann Le Cun, AT&T Corp, NECI.
;;; Includes parts of TL3:
;;;   Copyright (C) 1987-1999 Leon Bottou and Neuristique.
;;; Includes selected parts of SN3.2:
;;;   Copyright (C) 1991-2001 AT&T Corp.
;;;
;;; Includes information derived from the GSL (Gnu Scientific Library)
;;;   header files which are copyrighted and distributed under the GPL
;;;   by their respective authors.
;;;
;;; This program is free software; you can redistribute it and/or modify
;;; it under the terms of the GNU General Public License as published by
;;; the Free Software Foundation; either version 2 of the License, or
;;; (at your option) any later version.
;;;
;;; This program is distributed in the hope that it will be useful,
;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;; GNU General Public License for more details.
;;;
;;; You should have received a copy of the GNU General Public License
;;; along with this program; if not, write to the Free Software
;;; Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111, USA
;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(libload "python/python-config")


#? *** pyimport

;; dummy function that adds Python C header files in C file
(eval `(de dummy_pyimport () ,python-cpheader-cmd ()))

#? * (dummy_pyimport)
#? * (pyimport_getmagicnumber)
#? * (pyimport_execcodemodule <name> <co>)
#? * (pyimport_execcodemoduleex <name> <co> <pathname>)
#? * (pyimport_getmoduledict)
#? * (pyimport_addmodule <name>)
#? * (pyimport_importmodule <name>)
#? * (pyimport_importmoduleex <name> <globals> <locals> <fromlist>)
#? * (pyimport_import <name>)
#? * (pyimport_reloadmodule <m>)
#? * (pyimport_cleanup)
#? * (pyimport_importfrozenmodule <om>)
#? * (_pyimport_findextension <o1> <om>)
#? * (_pyimport_fixupextension <o1> <om>)
#? * (pyimport_appendinittab <name> <initfunc>)
#? * (pyimport_extendinittab <newtab>)

;; ********************************************************

(de PyImport_GetMagicNumber ()
    (int  #{  PyImport_GetMagicNumber(  )  #} ))    ;; long -> int

(de PyImport_ExecCodeModule ( name  co )
    ((-str-) name)  
    ((-gptr-"PyObject *") co)   
    (gptr  #{  PyImport_ExecCodeModule( $name->data ,$co )  #} ))        ;; PyObject * -> gptr

(de PyImport_ExecCodeModuleEx ( name  co  pathname )
    ((-str-) name)  
    ((-gptr-"PyObject *") co)  
    ((-str-) pathname)   
    (gptr  #{  PyImport_ExecCodeModuleEx( $name->data ,$co ,$pathname->data )  #} ))        ;; PyObject * -> gptr

(de PyImport_GetModuleDict ()
    (gptr  #{  PyImport_GetModuleDict(  )  #} ))        ;; PyObject * -> gptr

(de PyImport_AddModule ( name )
    ((-str-) name)   
    (gptr  #{  PyImport_AddModule( $name->data )  #} ))        ;; PyObject * -> gptr

(de PyImport_ImportModule ( name )
    ((-str-) name)   
    (gptr  #{  PyImport_ImportModule( $name->data )  #} ))        ;; PyObject * -> gptr

(de PyImport_ImportModuleEx ( name  globals  locals  fromlist )
    ((-str-) name)  
    ((-gptr-"PyObject *") globals)  
    ((-gptr-"PyObject *") locals)  
    ((-gptr-"PyObject *") fromlist)   
    (gptr  #{  PyImport_ImportModuleEx( $name->data ,$globals   ,$locals   ,$fromlist )  #} ))        ;; PyObject * -> gptr

(de PyImport_Import ( name )
    ((-gptr-"PyObject *") name)   
    (gptr  #{  PyImport_Import( $name )  #} ))        ;; PyObject * -> gptr

(de PyImport_ReloadModule ( m )
    ((-gptr-"PyObject *") m)   
    (gptr  #{  PyImport_ReloadModule( $m )  #} ))        ;; PyObject * -> gptr

(de PyImport_Cleanup ()
    #{ PyImport_Cleanup(  );  #} 
    ())

(de PyImport_ImportFrozenModule ( om )
    ((-str-) om)   
    (int  #{  PyImport_ImportFrozenModule( $om->data )  #} ))

(de _PyImport_FindExtension ( o1  om )
    ((-str-) o1)  
    ((-str-) om)   
    (gptr  #{ _PyImport_FindExtension( $o1->data ,$om->data )  #} ))        ;; PyObject * -> gptr

(de _PyImport_FixupExtension ( o1  om )
    ((-str-) o1)  
    ((-str-) om)   
    (gptr  #{ _PyImport_FixupExtension( $o1->data ,$om->data )  #} ))        ;; PyObject * -> gptr

(de PyImport_AppendInittab ( name  initfunc )
    ((-str-) name)  
    ((-gptr-) initfunc)   
    (int  #{  PyImport_AppendInittab( $name->data ,$initfunc )  #} ))

(de PyImport_ExtendInittab ( newtab )
    ((-gptr-"struct _inittab *") newtab)   
    (int  #{  PyImport_ExtendInittab( $newtab )  #} ))

;; ********************************************************

(dhc-make () 
  dummy_pyimport
  pyimport_getmagicnumber
  pyimport_execcodemodule
  pyimport_execcodemoduleex
  pyimport_getmoduledict
  pyimport_addmodule
  pyimport_importmodule
  pyimport_importmoduleex
  pyimport_import
  pyimport_reloadmodule
  pyimport_cleanup
  pyimport_importfrozenmodule
  _pyimport_findextension
  _pyimport_fixupextension
  pyimport_appendinittab
  pyimport_extendinittab
)
