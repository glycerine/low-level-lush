#? *** Storages

Storages are vectors of identical objects that
are used as data storage areas for scalars, 
vectors, matrices, tensors, and similar structures.

.IP
Data in a storage is rarely accessed directly, 
but often accessed through an IDX object.
Several IDXs can point to the same data in
a storage, allowing access of the data 
in multiple ways simultaneously.

.IP
The data in a storage can reside in memory (a memory 
storage) or on disk (a memory-mapped storage).
Disk files can be memory mapped into a storage
and accessed element by element or byte by byte
through storage or IDX access functions.

.IP
Storages can be resized/reallocated without 
adverse effects on the IDX that point to them.

#? ** Storage Creation and Allocation

Each of the following functions has several names.
For example, <int-storage> can also be invoked with
<new_i32_storage> as well as <new-int-storage>.
However, the names described below are preferred.

#? (float-storage [<n>])
.TYPE DE
.FILE storage.c
Creates a storage of class <|FSTORAGE|> whose elements are 
4-byte floats. If <n> is present, <n> elements are allocated in 
memory and initialized to 0 (or NIL). If <n> is not present,
an unsized storage is returned that can be subsequently
allocated in memory with storage_malloc, storage_malloc_nc,
or memory-mapped from a file with storage_mmap.

#? (double-storage [<n>])
.TYPE DE
.FILE storage.c
Creates a storage of class <|DSTORAGE|> whose elements are 
double precision floats (8 bytes). If <n> is present, <n> elements 
are allocated in 
memory and initialized to 0 (or NIL). If <n> is not present,
an unsized storage is returned that can be subsequently
allocated in memory with storage_malloc, storage_malloc_nc,
or memory-mapped from a file with storage_mmap.

#? (int-storage [<n>])
.TYPE DE
.FILE storage.c
Creates a storage of class <|I32STORAGE|> whose elements are 
4 byte siged integers. If <n> is present, <n> elements are allocated in 
memory and initialized to 0 (or NIL). If <n> is not present,
an unsized storage is returned that can be subsequently
allocated in memory with storage_malloc, storage_malloc_nc,
or memory-mapped from a file with storage_mmap.

#? (short-storage [<n>])
.TYPE DE
.FILE storage.c
Creates a storage of class <|I16STORAGE|> whose elements are 
2 byte siged integers. If <n> is present, <n> elements are allocated in 
memory and initialized to 0 (or NIL). If <n> is not present,
an unsized storage is returned that can be subsequently
allocated in memory with storage_malloc, storage_malloc_nc,
or memory-mapped from a file with storage_mmap.

#? (byte-storage [<n>])
.TYPE DE
.FILE storage.c
Creates a storage of class <|I8STORAGE|> whose elements are 
single-byte singed integers. If <n> is present, <n> elements are 
allocated in 
memory and initialized to 0 (or NIL). If <n> is not present,
an unsized storage is returned that can be subsequently
allocated in memory with storage_malloc, storage_malloc_nc,
or memory-mapped from a file with storage_mmap.

#? (ubyte-storage [<n>])
.TYPE DE
.FILE storage.c
Creates a storage of class <|U8STORAGE|> whose elements are 
single-byte unsinged integers. If <n> is present, <n> elements are 
allocated in 
memory and initialized to 0 (or NIL). If <n> is not present,
an unsized storage is returned that can be subsequently
allocated in memory with storage_malloc, storage_malloc_nc,
or memory-mapped from a file with storage_mmap.

#? (gptr-storage [<n>])
.TYPE DE
.FILE storage.c
Creates a storage of class <|GPTRSTORAGE|> whose elements are 
generic memory pointers. If <n> is present, <n> elements are allocated in 
memory and initialized to 0 (or NIL). If <n> is not present,
an unsized storage is returned that can be subsequently
allocated in memory with storage_malloc, storage_malloc_nc,
or memory-mapped from a file with storage_mmap.

#? (atom-storage [<n>])
.TYPE DE
.FILE storage.c
Creates a storage of class <|ATSTORAGE|> whose elements are 
Lisp objects. If <n> is present, <n> elements are allocated in 
memory and initialized to 0 (or NIL). If <n> is not present,
an unsized storage is returned that can be subsequently
allocated in memory with storage_malloc, storage_malloc_nc,
or memory-mapped from a file with storage_mmap.

#? (packed-storage [<n>])
.TYPE DE
.FILE storage.c
Creates a storage of class <|PSTORAGE|> whose elements are 
packed fixed point numbers (one-byte signed numbers with 
4 bit integer part and 4 bit fractional part). 
If <n> is present, <n> elements are allocated in 
memory and initialized to 0 (or NIL). If <n> is not present,
an unsized storage is returned that can be subsequently
allocated in memory with storage_malloc, storage_malloc_nc,
or memory-mapped from a file with storage_mmap.
This type of storage is somewhat obsolete, but 
is there for backward compatibility with SN2.x.

#? ** Storage Allocation

#? (storage-malloc <srg> <n>)
.TYPE DE
.FILE storage.c
Set the size of storage <srg> to <n>, allocate
<n> elements in memory, and clear the content (to 0 or NIL
depending on the type of storage). Storage <srg>
must be unsized (as returned by <new-xxx-storage>).

#? (storage-malloc-nc <srg> <n>)
.TYPE DE
.FILE storage.c
Set the size of storage <srg> to <n>, allocate
<n> elements in memory. The elements are not cleared
to save time. Storage <srg> must be unsized 
(as returned by <new-xxx-storage>).

#? (storage-realloc <srg> <n>)
.TYPE DE
.FILE storage.c
Change the size of storage <srg> to <n>, and reallocate
<n> elements in memory. IDXs that points to <srg> are unaffected
(i.e. they point to the right place and their content 
data is unchanged). The newly allocated data segment
is initialize to 0 or NIL.

#? (storage-realloc-nc <srg> <n>)
.TYPE DE
.FILE storage.c
Change the size of storage <srg> to <n>, and reallocate
<n> elements in memory. IDXs that points to <srg> are unaffected
(i.e. they point to the right place and their content 
data is unchanged). The newly allocated data segment
is NOT initialized.

#? (storage-mmap <srg> <file> <offset>)
.TYPE DE
.FILE storage.c
maps the content of file <file> into memory. <file>
can be either a file descriptor or a string containing
a filename. Each element
of the file starting at byte <offset> is made accessible through 
the corresponding element of the storage <srg>. 
Storage of Lisp objects (<|ATSTORAGE|> cannot be memory mapped.
Mapped storages are read-only.
Whether a storage is read-only can be determined
with the function <writablep>.

#? ** Storage Access

Storage elements can be read and set as if the storage were
an IDX with one dimension (a vector). In other words <(s 3)> 
returns the value of element 3 of storage <s>. <(s 3 5)> sets 
it to 5.

#? ** Miscellaneous Storage Functions

#? (storage-save <srg> <file>)
save the content of storage <srg> into file <file>.
<file> may be a string containing a filename or a file descriptor.
Data is written raw, without a header, and in the native
format of the machine (multibyte elements will not be portable
between big and small-endian machines).

#? (storage-load <srg> <file>)
load storage <srg> with the content of file <file>.
<file> may be a string containing a filename or a file descriptor.

#? (storagep <srg>)
return true is <srg> is a storage, and nil otherwise.

#? (writablep <srg>)
return true if <srg> is writable, and nile otherwise.
Memory mapped storages are generally not writable.

#? (storage-read-only <srg>)
marks storage <srg> as being read-only.
No Lisp function can write into it after this.

#? (storage-size <srg>)
return the number of element in storage <srg>.
Return 0 if the storage is unsized.

#? (storage-clear <srg>)
Fills up all the element of storage <srg>
with 0 or NIL.

