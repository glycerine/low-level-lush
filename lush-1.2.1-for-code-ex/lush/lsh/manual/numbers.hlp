$Id: numbers.hlp,v 1.6 2006/02/26 15:34:46 laseray Exp $
#? *** Numbers
.SEE Special Numerical Values (IEEE754).

Numbers are the simplest kind of atoms. 
They are stored as double precision floating point numbers. 

Numerical computations in Lush are usually performed in double 
precision. Single precision however is used by some number crunching functions, 
like the matrix calculus operations.

You can type in decimal number using the traditional exponential
notation or using hexadimal numbers preceded by characters <"0x">.
Here are a few examples of legal numbers:
.CODE
	23
	3.14
	12e6		;; equivalent to 12000000
	1.2E6		;; equivalent to  1200000
	0x1A		;; equivalent to 26
.PP


#?  ** Elementary Numerical Functions

The following elementary functions operate on numbers:

#? (+ <n1> ... <nm>)
Computes the sum of numbers <n1> to <nm>.

Example:
.EX (+ 1 2 3 4)

#? (1+ <n>)
Adds 1 to <n>.

Example:
.EX (1+ 4)

#? (-  [<n1>] <n2>)
Subtracts <n2> from <n1>. If one argument only is provided, 
returns the opposite of <n2>.

Example:
.EX (- 2 5)

#? (1- <n>)
Subtracts 1 from <n>.

Example:
.EX (1- (+ 4 5))

#? (* <n1> ... <nm>)
Computes the product of <n1> to <nm>. 

Here is a memory intensive way of computing a factorial:
.EX (apply '* (range 1 5))

#? (2* <n>)
Multiplies <n> by 2.

Example:
.EX (2* (+ 4 5))

#? (/  [<n1>] <n2>)
Divides <n1> by <n2>. If one argument only is provided, 
Function </> returns the inverse of <n2>.

Example:
.EX (/ 3)

#? (2/ <n>)
Divides <n> by 2.

Example:
.EX (2/ 5)

#? (** <n> <m>)
Returns <n> raised to the <m>th power.

Example:
.EX (** 2 5)

#? (max <l1> ... <ln>)	
Return the maximum element within <l1> ... <ln>. 
Arguments <li> may be numbers or strings.

Example:
.EX (max 2 3 (* 3 3) (+ 4 3))

#? (min <l1> ... <ln>)	
Return the minimum element within <l1> ... <ln>. 
Arguments <li> may be numbers or strings.

Example:
.EX (min 2 3 (* 3 3) (+ 4 3))

#? ** Integer Arithmetic Functions

Besides the ordinary number operation functions, a few functions
deal with integer numbers only. For that purpose we consider only
the first 32 bits of the integer part of the number.

#? (div <n1> <n2>)
Returns the quotient of the Euclidian division of <n1> by <n2>.

Example:
.EX (div 5 2)

#? (mod <n1> <n2>)
Returns the remainder of the Euclidian division of <n1> by <n2>.

Example:
.EX (mod 5 2)


#? (bitand <n1> <n2>)
Returns the bitwise AND of integer numbers <n1> and <n2>.

#? (bitor <n1> <n2>)
Returns the bitwise OR of integer numbers <n1> and <n2>.

#? (bitxor <n1> <n2>)
Returns the bitwise exclusive or (XOR) of integer numbers <n1> and <n2>.

#? (bitshl <n1> <n2>)
Shifts the bits of integer <n1> by <n2> positions to the left 
and returns the result.
This is similar to the C operator \$">>" .

#? (bitshr <n1> <n2>)
Shifts the bits of integer <n1> by <n2> positions to the right 
and returns the result.
This is similar to the C operator \$">>" .


#? ** Mathematical Numerical Functions

Most mathematical functions are implemented as DZ functions.
DZs are a remnant of a now obsolete compiler for numerical
expressions. For more details about DZ functions the 
corresponding section.


#? (sgn <n>)
Returns +1 if <n> is equal or greater than 0 , -1 otherwise.
.EX (sgn -2)
.EX (sgn 1.2)

#? (abs <n>)
Returns the absolute value of <n>.
.EX (abs 123.3)
.EX (abs -23.3)

#? (int <n>)
Returns the integral part of <n>.
.EX (int -4.5)
.EX (int 4.5)

#? (sqrt <n>)
Returns the square root of <n>
.EX (sqrt 15)

#? (0-x-1 <n>)
This function implements a piecewise saturated linear function.
It returns 0 if <n> is smaller than -1.
It returns 1 if <n> is larger than +1.
It returns <n> if <n> is in the -1 to +1 range.
.EX (0-x-1 -2)
.EX (0-x-1 0.7)
.EX (0-x-1 1.3)

#? (0-1-0 <n>)
This function implements the indicator function of the -1 to +1 range.
It returns 1 if <n> is in the -1 to +1 range.
It returns 0 otherwise.
.EX (0-1-0 -2)
.EX (0-1-0 0.7)

#? (sin <n>)
Returns the sine of <n> radians.
.EX (sin (/ 3.1415 3))

#? (cos <n>)
Returns the cosine of <n> radians.
.EX (cos (/ 3.1415 3))

#? (tan <n>)
Returns the tangent of <n> radians.
.EX (tan (/ 3.1415 3))

#? (atan <n>)
Returns the arc tangent of <n>, in radians.
.EX (* 4 (atan 1))

#? (exp <n>)
Returns the exponential of <n>.
.EX (exp 1)

#? (exp-1 <n>)
Returns the exponential of <n> minus 1.
This function gives an accurate value of
<exp(n)-1> even for small values of <n>.
.EX (exp-1 0.5)

#? (log <n>)
Returns the natural logarithm of <n>.
.EX (log 2)

#? (log1+ <n>)
Returns the natural logarithm of <n> plus 1.
This function gives an accurate value of
<log(1+n)> even for small values of <n>.
.EX (log1+ 1)

#? (sinh <n>)
Returns the hyperbolic sine of <n>.
.EX (sinh 1) 

#? (cosh <n>)
Returns the hyperbolic cosine of <n>.
.EX (cosh 1)

#? (tanh <n>)
.SEE (qtanh <n>)
Returns the hyperbolic tangent of <n>.
.EX (tanh 1)


#? (qtanh <n>)
.SEE (tanh <n>)
Returns a rational approximation of the hyperbolic 
tangent of <n>. This function is orders of magnitude faster
than <tanh>. Its acuracy however is quite low (about 0.00001.)
.EX (qtanh 1)
.IFTEX
The formula of the approximation is:
 \[    
      \tanh(x) \approx \frac { P(x)^16-1 } { P(x)^16+1 }   
 \]
where
 \[
      P(x) = 1 + 0.125 x + 0.0078125 x^2 + 0.00032552083 x^3   
 \]
.IFHLP
The formula of the approximation is:
  tanh(x) =~ ( P(x)^16 - 1) / ( P(x)^16 + 1)
where
  P(x) = 1 + 0.125 x + 0.0078125 x^2 + 0.00032552083 x^3   
.PP

#? (qdtanh <n>)
Returns a rational approximation of the derivative of the hyperbolic
tangent of <n>. The accuracy of this function is quite low (about
0.00001), but its computation time is very small.
.EX (qdtanh 1)
.IFTEX
The formula of the approximation is:
 \[
      \frac{d}{dx} ( 1 - \tanh (x)^2 )
  	\approx
      1 - \left( \frac { P(x)^16-1 } { P(x)^16+1 } \right) ^2  
 \]
where
 \[
      P(x) = 1 + 0.125 x + 0.0078125 x^2 + 0.00032552083 x^3   
 \]
.IFHLP
The formula of the approximation is:
  d/dx tanh(x) =~ 1 - [(P(x)^16-1)/(P(x)^16+1)]^2
where
  P(x) = 1 + 0.125 x + 0.0078125 x^2 + 0.00032552083 x^3   
.PP

#? (qstdsigmoid <n>)
.SEE (qtanh <n>)
Returns the value of standard sigmoid at point <n>, computed with a
rational approximation to the hyperbolic tangent. The standard sigmoid
is defined as
.IFTEX
   \[ 1.7159 {\rm tanh} ( \frac{2}{3} x ) \]
.IFHLP
   1.7159 tanh ( 0.6666 x )
.PP

#? (qdstdsigmoid <n>)
.SEE (qdtanh <n>)
Returns the value of the derivative of standard sigmoid at point <n>,
computed with a rational approximation to the hyperbolic tangent. The
standard sigmoid is defined as
.IFTEX
   \[ 1.7159 {\rm tanh} ( \frac{2}{3} x ) \]
.IFHLP
   1.7159 tanh ( 0.6666 x )
.PP

#? (qexpmx <n>)
Returns a rational approximation of the exponential of minus the
absolute value of <n>. The accuracy of this function is quite low
(about 0.00001), but its computation time may be smaller on certain
computers.
.EX (qexpmx 1)
.IFTEX
The formula of the approximation is:
 \[
      e^{-|x|}  \approx  \frac{ 1 }{ P(|x|)^8 }
 \]
where 
 \[
      P(x) = 1 + 0.125 x + 0.0078125 x^2 + 0.00032552083 x^3   
		+  0.000010172526 x^4
 \]
.IFHLP
The formula of the approximation is:
    exp(-x) =~ 1/P(|x|)^8
where 
    P(x) = 1 + 0.125 x + 0.0078125 x^2 + 0.00032552083 x^3   
             +  0.000010172526 x^4


#? (qdexpmx <n>)
Returns a rational approximation of the derivative of the exponential
of minus the absolute value of <n>. The accuracy of this function is
quite low (about 0.00001), but its computation time may be smaller on certain
computers.
.EX (qdexpmx 1)
.IFTEX
The formula of the approximation is:
 \[
      \frac{d}{dx} e^{-|x|}  \approx  - {\rm sgn}(x) \frac{ 1 }{ P(|x|)^8 }
 \]
where 
 \[
      P(x) = 1 + 0.125 x + 0.0078125 x^2 + 0.00032552083 x^3   
		+  0.000010172526 x^4
 \]
.IFHLP
The formula of the approximation is:
    d/dx exp(-x) =~  - sgn(x) / P(|x|)^8
where 
    P(x) = 1 + 0.125 x + 0.0078125 x^2 + 0.00032552083 x^3   
             +  0.000010172526 x^4


#? (qexpmx2 <n>)
Returns a rational approximation of the exponential of minus the
square of <n>. The accuracy of this function is quite low
(about 0.00001), but its computation time may be smaller on certain
computers.
.EX (qexpmx 1)
.IFTEX
The formula of the approximation is:
 \[
      e^{-x^2}  \approx  \frac{ 1 }{ P(x^2)^8 }
 \]
where 
 \[
      P(x) = 1 + 0.125 x + 0.0078125 x^2 + 0.00032552083 x^3   
		+  0.000010172526 x^4
 \]
.IFHLP
The formula of the approximation is:
    exp(-x) =~ 1/P(x^2)^8
where 
    P(x) = 1 + 0.125 x + 0.0078125 x^2 + 0.00032552083 x^3   
             +  0.000010172526 x^4

#? (qdexpmx2 <n>)
Returns a rational approximation of the exponential of minus the
square of <n>. The accuracy of this function is quite low (about
0.00001), but its computation time may be smaller on certain
computers.
.EX (qdexpmx 1)
.IFTEX
The formula of the approximation is:
 \[
      \frac{d}{dx} e^{-n^2}  \approx  - 2 x \frac{ 1 }{ P(n^2)^8 }
 \]
where 
 \[
      P(x) = 1 + 0.125 x + 0.0078125 x^2 + 0.00032552083 x^3   
		+  0.000010172526 x^4
 \]
.IFHLP
The formula of the approximation is:
    d/dx exp(-x) =~ -2 x / P(x^2)^8
where 
    P(x) = 1 + 0.125 x + 0.0078125 x^2 + 0.00032552083 x^3   
             +  0.000010172526 x^4



#? (solve <min> <max> <f>)
Simple dichotomical root finder. <f> is a function with one argument
only. <solve> will return a numerical approximation of the solution of
<f(x)=0> between <min> and <max>.  To ensure the existence of this
solution, <f(min)> and <f(max)> must have different signs.

Example:
.EX (solve 1 2 (lambda(x) (- 2 (* x x))))



#? ** Random Numbers

Statistical functions are provided for computing random numbers,
computing various statistics on list of numbers or performing
simple linear regressions.

#? (seed <n>)
Sets the random number generator seed. The random generator is
replicable. The same seed will produce the same sequence of random
numbers. Argument <n> must be a legal integer number.

#? (rand [[<a>] <b>])
Returns a uniform random number:
.IP
If no arguments are provided, function <rand> 
returns a random number between 0 and 1.
.IP
If argument <b> only is given, function <rand> 
returns a random number between <-b> and <b>.
.IP
If both arguments <a> and <b>, function <rand>
returns a random number between <a> and <b>. 
.PP
Example:
.EX (rand)


#? (gauss [[<m>] <s>])
Returns a gaussian number with mean <m> and standard deviation <s>.
The default value for argument <m> is <0>. 
The default value for argument <s> is <1>.

Example
.EX (gauss 2)


#? ** Hashing

#? (hashcode <expr>)

Returns a string containing a hash code 
for the lisp expression <expr>.
Hash codes are guaranteed to be equal when
two expressions are logically equal,
that is to say, equal as defined by function <=>.

