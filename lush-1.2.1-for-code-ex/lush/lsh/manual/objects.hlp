$Id: objects.hlp,v 1.8 2006/04/08 19:59:40 laseray Exp $

#? *** Objects

{<p>
  All atoms are stored as pairs (class, instance). The {<i> class} component
  provides informations about the general properties of that kind of atom.
  The {<i> instance} component contains the properties of this specific atom
  in particular. Classes themselves are unnamed atoms, stored as value of
  certain symbols. For example, classes are instances of the class <class>
  (i.e. of the class stored as the value of the symbol <class>).
}


#? ** Object Terminology

{<p>
  A class defines two major kinds of information:
}
{<ul>
  {<li>
    An atom can contain storage for one or several lisp objects. Such
    storage areas are called {<i> slots}, and have symbolic names. A class
    defines the number of slots allocated in a new atom as well as their
    names. This slot information is statically defined by the <defclass>
    function during class definition;
  }
  {<li>
    Atoms can receive messages sent with the function {<i> ==>}. Messages 
    are identified by a symbol called the {<i> message selector}. A class 
    defines the possible message selectors and functions (i.e methods) to 
    execute when it receives such messages. These {<i> methods} are
    dynamically defined with the <putmethod> function.
  }
}

{<p>
  In addition, predefined classes associated with standard Lush objects
  often have hidden properties. Such classes are special and do not inherit
  from the <object> class. For example, a symbol has some storage for
  its value; the storage is not a slot. A symbol also returns its value
  when it is evaluated; this behavior is not a method.
}


#? ** Inheritance

{<p>
  New classes defined with the <defclass> function are always subclasses
  of another class (i.e. its superclass). The superclass itself may have
  its own superclasses. In this way:
}
{<ul>
  {<li>
    {<i> A class inherits the slots of its superclasses}. When a new object
    is created, space is allocated for the slots defined by its class and
    also for the slots defined by all of its superclasses;
  }
  {<li>
    {<i> A class inherits the methods of its superclasses}. When an object
    receives a message with a given selector, it searches the methods
    defined by its class for the selector. If no method is found that
    matches the selector it searches the methods of its superclass, the
    methods of the superclass of its superclass, and so on. When it
    reaches a matching method it executes the associated function in the
    context of the class that defines the matching method.
  }
}


#? ** Predefined Classes

{<p>
  Here is a compact list of the main predefined classes. Most of them are
  named using uppercase symbols, which ought to be surrounded with bars
  to avoid the usual lowercase conversion:
}
{<ul>
  {<li>
    <object>: the root class of most user defined classes;
  }
  {<li>
    <class>: classes are actually lisp objects, instance of the <class>
    class. Thus, class <class> is an instance of itself;
  }
  {<li>
    <|NUMBER|>: the class of the numbers;
  }
  {<li>
    <|LIST|>: the class of the pairs used for building lists;
  }
  {<li>
    <|SYMB|>: the class of the symbols;
  }
  {<li>
    <|STRING|>: the class of the strings;
  }
  {<li>
    <|DE|> <|DF|> <|DM|> <|DX|> <|DY|>: the classes of functions;
  }
  {<li>
    and so on.
  }
}

{<p>
  All user defined classes must be direct or indirect subclasses of the
  class <object>. You cannot inherit a predefined class like <|SYMB|>,
  it is not a subclass of <object>. The <object> class defines a regular 
  lisp object with no hidden properties. Instances of subclasses of the 
  class <object> are easily created with the function <new>.
}


#? ** Defining a Class

#? (defclass <name> <superclass> <s1> ... <sn>)

{<p>
  Defines a subclass of class <superclass> with slots <s1> ... <sn>.
  The class is stored into symbol <name>, which is returned.  
  Slot specifications <s1> ... <sn> can be symbols or lists <(symbol
  default)> which indicate initial values assigned to the slots of a new
  object.
}
{<p>
  Example:
  {<br>}
  {<code>
 ;;; Creates a class <rect> with two slots: <width> and <height>.
 ? (defclass rect object
     width height )
 = rect
 ;;; Creates a subclass of <rect>,
 ;;; plus an additional slot <name> with default value <"noname">.
 ? (defclass namedrect rect
     (name "noname") )
 = namedrect
  </code>}
}


#? (makeclass <classname> <superclass> <slotnamelist> <slotdefaultlist>)

{<p>
  This a lower-level function to create a new class named <classname>.  
  Most user will prefer to use <defclass> instead. The new class inherits
  class <superclass>. List <slotnamelist> contains the names of the
  additional slots defined by the new class. List <slotdefaultlist> 
  contains the default values for these slots. Both lists are in reverse
  order (i.e. the first slot in the list appears last when pretty-printing
  the class). This function does not set the value of symbol <classname>,
  use the macro function <defclass> for that purpose.
}


#? (classname <c>)

{<p>
  Returns the name of class <c>, i.e the symbol with the corresponding value
  that was set by <defclass>.
}
{<p>
  Example:
  {<br>}
  {<code>
 ? (classname rect)
 = rect
  </code>}
}


#? (slots <c>)

{<p>
  Returns the list of the slots defined for class <c>.
}
{<p>
  Example:
  {<br>}
  {<code>
 ? (slots rect)
 = (width height)
 ? (slots namedrect)
 = ((name "noname"))
  </code>}
}


#? (methods <c>)

{<p>
  Returns the list of all method names defined for class <c>.
}


#? (super <c>)

{<p>
  Returns the superclass of class <c> or the empty list if <c> has no
  superclass.
}
{<p>
  Example:
  {<br>}
  {<code>
 ? (super rect)
 = ::class:object
 ? (classname (super namedrect))
 = rect
  </code>}
}


#? (subclasses <c>)

{<p>
  Returns the list of all subclasses of class <c>. When argument <c> is 
  the empty list <subclasses> returns the list of root classes, i.e. classes
  without superclass.
}
{<p>
  Example:
  {<br>}
  {<code>
 (subclasses object)
  </code>}
}


#? ** Creating Objects


#? (new <class> ... <args> ...)

{<type> DY}

{<p>
  Creates a new instance of a subclass <class> of the class <object>.
}
{<p>
  If no constructor method is defined no arguments are allowed. If a
  constructor method is defined for class <class> a construction message
  is sent to the new object with arguments <args>.
}
{<p>
  Example:
  {<br>}
  {<code>
 ;; Classes <rect> and <namedrect> are defined as examples for <defclass>.
 ;; Creates instances of classes <rect> and <namedrect>.
 ? (setq r (new rect))
 = ::rect:06fa0
 ? (setq nr (new namedrect))
 = ::namedrect:06fe8
  </code>}
  {<br>}
  This function only works when creating instances of subclasses of
  class <object>. It is not possible to directly create instances of
  subclasses of other predefined classes.
}


#? (new-empty <class>)

{<p>
  Creates a new instance of class <class> without calling the constructor.
  All slots are initialized to <()>.  
}
{<p>
  Use this function with care because the empty object might trump 
  the expectations of other code working with this class.
}


#? (new-copy <object>)

{<p>
  Creates a copy of the user defined object <object>. The copy is an
  instance of the same class with all slots initialized to the same
  values. The contents of the slots are not copied. This is equivalent to:
  {<br>}
  {<code>
 (let* ((c (classof object))
        (n (new-empty c)) )
   (setq :n:slot1 :object:slot1)
   (setq :n:slot2 :object:slot2)
   ...
   (setq :n:slotN :object:slotN)		
   n )
  </code>}
  {<br>}
  Use this function with care because other code working with this
  class might not be able to deal with multiple copies of the
  same object. Calls to destructors are particularly problematic.
}


#? (delete <x>)

{<p>
  Deletes the Lush object <x>.
}
{<p>
  The operation of this function is somewhat tricky because all other
  references to object <x> must be converted to references to the empty
  list.  
}
{<p>
  If destructor methods are defined for an object then destruction messages
  are sent. Object <x> is then converted to an instance of the class
  <|ZOMBIE|>. During its normal operation, the interpreter recognizes 
  these zombies and always replaces a reference to a zombie by a reference
  to the empty list.
}


#? (classof <x>)

{<p>
  Returns the class of an object <x>.
}
{<p>
  Example:
  {<br>}
  {<code>
 (classof (new object))
  </code>}
}


#? (is-of-class <x> <class>)

{<p>
  Tests if the class of object <x> of any of its superclass is equal to
  class <class>.
}
{<p>
  Example:
  {<br>}
  {<code>
 ? (is-of-class nr rect)
 = t
  </code>}
}

#? ** Accessing Slots

{<p>
  There are various ways to read or change the values stored in the slots
  of an object. Changing the value stored in a slot changes the object
  in a way comparable to <rplaca> and <rplacd>, in the case of lists.
  This change will be reflected through all pointers referring to 
  the same object.
}
{<see> (== <n1> <n2>)}


#? :<obj>:<slot1>...:<slotn>

{<type> DMC}
{<location> sysenv.lsh}
{<see> (scope <obj> <slot1> ... <slotn>)}
{<see> (scope <symb>)}

{<p>
  This macro character is expanded as a call to the <scope> function.
}


#? (scope <obj> <slot1> ... <slotn>)

{<see> :<obj>:<slot1>...:<slotn>}
{<see> (scope <symb>)}

{<p>
  The simplest method for setting or getting the slots of an object is
  called the {<i> scope macro}. The syntax <:obj:slot> refers to the slot
  <slot> of object <obj>. Actually, the scope macro character converts
  expression <:obj:slot> into a list <(scope obj slot)>.
}
{<p>
  When this list is evaluated the <scope> function returns the value of
  slot <slot> of object <obj>. Moreover, most functions that affect the
  value of a symbol recognize such a list as a reference to slot <slot>
  of object <obj>.
}
{<p>
  Nested scope macros are allowed: <:obj:slot_1:slot2> refers to
  slot <slot2> of the object contained in slot <slot1> of object <obj>.
}
{<p>
  Example:
  {<br>}
  {<code>
 ;; Classes <rect> and <namedrect> are defined as examples for <defclass>.
 ;; Objects <r> and <nr> are defined as examples for <new>.
 ? (setq :nr:name "myrectangle")
 = "myrectangle"
 ? (setq :nr:width  8 
         :nr:height 6 )
 = 6
 ? (print :nr:width :nr:height :nr:name)
 8 6 "myrectangle"
 = "myrectangle"
  </code>}
}


#? (scope <symb>)

{<see> (scope <obj> <slot1> ... <slotn>)}
{<see> :<obj>:<slot1>...:<slotn>}

{<p>
The scope macro has another important use as the {<i> unary scope macro}.
Expression <:symb> is converted into list <(scope symb)> which refers
to the global value of symbol <symb>.
}
{<p>
  Example:
  {<br>}
  {<code>
 ? (defvar x 3)
 = 3
 ? (let ((x 8))
     (print :x)
     (setq :x 6)
     (print x) )
 3
 8
 = 8
 ? x
 = 6
  </code>}
}


#? (letslot [<class>] <obj> <l1> ... <ln>)

{<see> (scope <obj> <slot1> ... <slotn>)}
{<see> this}

{<p>
  Calls function <progn> on <l1> ... <ln>, within the scope of object
  <obj>, and returns the last result. Within the object scope each
  slot of the object, either defined by its class or inherited from its
  superclasses, can be directly accessed as the value of its symbolic 
  slot name.
}
{<p>
  Example:
  {<br>}
  {<code>
 ;; Classes <rect> and <namedrect> are defined as examples for <defclass>.
 ;; Objects <r> and <nr> are defined as examples for <new>.
 ? (setq width ())
 = ()
 ? (letslot r
     (setq width 4)
     (setq height 5) )
 = 5
 ? width
 = ()
 ? (letslot r (* width height))
 = 20
  </code>}
  {<br>}
  Within an object scope the symbol <this> always refers to object itself.
}
{<p>
  The optional argument <class> must be the object class or one of its
  superclasses. The only visible slots are then defined by class <class>
  and its superclasses. This can make a difference when <obj> is an instance
  of a subclass of <class>.
}


#? ** Defining Methods


#? (defmethod <class> <symb> <args> . <body>)

{<type> DM}
{<location> sysenv.lsh}
{<see> Argument List}
{<see> (==> <obj> <symb> ... <args> ... )}

{<p>
  Defines a method named <symb> for class <class>. Argument <symb> must
  be a symbol and is not evaluated. Argument <args> must be a valid
  argument list.
}
{<p>
  When an instance of class <class> receives a message whose selector is
  <symb> the body <body> of the method is executed with a call to function
  <progn>. During this execution the slots defined by <class> and its
  superclasses are bound to their symbolic names, as in <letslot>, and 
  the arguments of the message are evaluated and bound to the symbols in
  argumentlist <args>.
}
{<p>
  Example:
  {<br>}
  {<code>
 ;; Classes <rect> and <namedrect> are defined as examples for <defclass>.
 ;; Objects <r> and <nr> are defined as examples for <new>.
 ;;
 ;; This is a method for computing the surface of a rect.
 ? (defmethod rect surface()
     (* width height) )
 = surface
 ;; a method for printing  n times the name of a namedrect
 ? (defmethod namedrect showname(n)
     (repeat n (print name)) )
 = showname
  </code>}
}


#? (demethod <class> <symb> <args> . <body>)

{<type> DM}
{<location> sysenv.lsh}
{<p>
  Identical to <defmethod>.
}


#? (dfmethod <class> <symb> <args> . <body>)

{<type> DM}
{<location> sysenv.lsh}
{<p>
  Defines an flambda-method named <symb> for class <class>. flambda-methods
  do not evaluate their arguments, unlike regular methods defined with
  demethod or defmethod.
}


#? (dmmethod <class> <symb> <args> . <body>)

{<type> DM}
{<location> sysenv.lsh}
{<p>
  Defines an mlambda-method named <symb> for class <class>. mlambda-methods
  are to regular methods what macros (defined with <dm> or <mlambda>) are 
  to regular functions (defined with <de> or <lambda>).
}


#? (putmethod <class> <symb> <func>)

{<type> DX}

{<p>
  Add method <symb> to class <class>. <func> must be a lambda, flmabda,
  or mlambda.
}


#? (pretty-method <class> <symb>)

{<type> DE}
{<location> sysenv.lsh}
{<p>
  Prints a nicely indented definition of method <symb> of class <class>.
}


#? ** Sending Messages


#? (==> <obj> <symb> ... <args> ... )

{<p>
  Sends a message whose selector is <symb> to object <obj>, with
  arguments <args>.
}
{<p>
  Example:
  {<br>}
  {<code>
 ;; Classes <rect> and <namedrect> are defined as examples for <defclass>.
 ;; Objects <r> and <nr> are defined as examples for <new>.
 ;; Method <surface> is defined as an example for <defmethod>.
 ;;
 ;; Send a surface message to rect <r>
 ? (==> r surface)
 = 20
 ;; Send a showname message to namedrect <nr>
 ? (==> nr showname 2)
 "myrectangle"
 "myrectangle"
 = "myrectangle"
 ;; Send a surface message to namedrect <nr>
 ;; The method is inherited from superclass <rect>
 ? (==> nr surface)
 = 48
  </code>}
  {<br>}
  When an object receives a message its method is executed in the
  object scope defined by the class that owns the method: If the method
  is defined by a superclass only the slots of that superclass and of
  its superclasses are directly referred to by their names.
}
{<p>
  When no method <symbol> is defined in the class or superclasses
  a method named <-unknown> is searched for. Once found, the <-unknown>
  method is executed with two arguments: the initial method name <symb> 
  and the list of the evaluated arguments <args>. An error occurs if 
  method <-unknown> is not defined.
}


#? (==> <obj> (<class> . <symb>) ... <args> ... )

{<p>
  This construction is known as a {<i> cast-and-send}. A message with
  selector <symb> and arguments <args> is sent to the object <obj>,
  considered as an instance of class <class>. Methods are searched for
  in class <class> and its superclasses, instead of the class of <obj> 
  and its superclasses.
}
{<p>
  Argument <class> is evaluated and must return a superclass of the class 
  of <obj>. Argument <symb> is not evaluated and must be a valid method
  selector for class <class>.
}
{<p>
  Example:
  {<br>}
  {<code>
 ;; Classes <rect> and <namedrect> are defined as examples for <defclass>.
 ;; Objects <r> and <nr> are defined as examples for <new>.
 ;; Method <surface> is defined as an example for <defmethod>.
 ;;
 ;; Override surface method of class rect
 ? (defmethod namedrect surface()
        ;; prints the name by sending a showname message
        (==> this showname 1)
        ;; returns 1+ the result of the surface method of class rect
        (1+ (==> this (rect . surface))) )
 = surface
 ? (==> nr surface)
 "myrectangle"
 = 49
 ;; Still call the surface method of class rect
 ? (==> nr (rect . surface))
 = 48
  </code>}
}


#? this

{<see> (letslot <obj> <l1> ... <ln>)}
{<see> (==> <obj> <symb> ... <args> ... )}

{<p>
  While Lush is executing a method you can use symbol <this> to refer
  to the object receiving the message.
}


#? (check==> <class> <symb>)

{<p>
  Searches class <class> and its superclasses for a method whose
  selector is <symb>. If a matching method exists this function
  returns the method as a DF function.
}
{<p>
  Example:
  {<br>}
  {<code>
 ;; Classes <rect> and <namedrect> are defined as examples for <defclass>.
 ;; Objects <r> and <nr> are defined as examples for <new>.
 ;; Method <surface> is defined as an example for <defmethod>.
 ;;
 ;; There is no method yoyo in rect
 ? (check==> rect 'yoyo)
 = ()
 ;; there is a method surface in rect
 ? (check==> rect 'surface)
 = DF:0604c
  </code>}
}


#? (apply==> <obj> <symbol> <args>)

{<p>
  Sends message <symbol> to object <obj> with the list <args> as arguments.
}


#? ** Constructors and Destructors

{<see> (new <class> ... <args> ...)}
{<see> (delete <x>)}

{<p>
  Constructors are specific methods whose selector is the name of their
  class, as returned by the function <classname>. Constructors are useful
  for easy initialization of an object during its creation.
}
{<p>
  Whenever a new object is created, with the <new> function, a construction
  message is sent to the new object. The optional arguments of the <new>
  function are sent as arguments to the construction message.
}
{<p>
  Example:
  {<br>}
  {<code>
 ;; Classes <rect> and <namedrect> are defined as examples for <defclass>.
 ;; Method <surface> is defined as an example for <defmethod>.
 ;;
 ;; Define a constructor for class rect
 ? (defmethod rect rect(w h)
     (setq width w)
     (setq height h) )
 = rect
 ;; creates a new rectangle
 ? (setq r (new rect 8 9))
 = ::rect:06fb8
 ;; sends a surface message
 ? (==> r surface)
 = 72
  </code>}
  {<br>}
  The function <new> only calls a constructor when it is defined by the 
  class of the newly created object. However, constructors can call the
  constructor method of their superclass.
}
{<p>
  Example:
  {<br>}
  {<code>
 ;; defines a constructor for class namedrect
 ? (defmethod namedrect namedrect(w h n)
     ;; explicitely calls the constructor of class rect.
     (==> this rect w h)
     (setq name n) )
  </code>}
  {<br>}
  Destructors are specific methods whose selector is <-destructor>.
  When an object is deleted all the destructors of its class and
  superclasses are successively called. Deletion occurs when the
  function <delete> is called on an object or when the garbage
  collection mechanism proves that an object will no longer be accessed.
}
{<p>
  Note: Only objects created with function <new> receive destruction
  messages. Numbers, strings, and symbols usually do not receive such
  messages.
}
{<p>
  Example:
  {<br>}
  {<code>
 ;; Classes <rect> and <namedrect> are defined as examples for <defclass>.
 ;; Objects <r> and <nr> are defined as examples for <new>.
 ;; Method <surface> is defined as an example for <defmethod>.
 ;;
 ;; Defines a destructor for the rect class
 ? (defmethod rect -destructor()
     (printf "rect destructor on %l\n" this) )
 = -destructor
 ;; Defines a destructor for the namedrect class
 ? (defmethod namedrect -destructor()
     (printf "namedrect destructor on %l (%s)\n" this name) )
 = -destructor
 ;; deletes objects r and nr
 ? (delete r)
 rect destructor on ::rect:06fb8
 = ()
 ? r
 = ()
 ? (delete nr)
 namedrect destructor on ::namedrect:06fe8 (myrectangle)
 rect destructor on ::namedrect:06fe8
 = ()
 ? nr
 = ()
  </code>}
  {<br>}
  Destructors allow objects to perform some housekeeping before they
  disappear.
}


#? ** Predefined Methods


#? (==> <obj> pname)

{<type> MSG}
{<see> (pname <l>)}

{<p>
  The function <pname> returns a string that describes a lisp object. 
  When executing this function Lush searches the object for a method 
  <pname> before applying the hardcoded defaults. Overriding method 
  <pname> lets you redefine how Lush prints certain objects.
}
{<p>
  Example:
  {<br>}
  {<code>
 ;; Classes <rect> and <namedrect> are defined as examples for <defclass>.
 ;; Objects <r> and <nr> are defined as examples for <new>.
 ;; Method <surface> is defined as an example for <defmethod>.
 ;;
 ;; Defines a pname function for the rect class
 ? (defmethod rect pname()
     (sprintf "<rectangle %d by %d>" width height) )
 = pname
 ? (new rect 8 6)
 = <rectangle 8 by 6>
  </code>}
}


#? (==> <obj> print)

{<type> MSG}
{<see> (prin <l1> ... <ln>)}

{<p>
  When Lush prints an object with function <prin> or <print> it searches
  for a method <print> before applying hardcoded defaults based on function
  <pname>.
}
{<p>
  It is a good idea to override method <print> instead of method <pname> 
  when large amounts of text are necessary (e.g. in the case of matrices).
}


#? (==> <obj> pprint)

{<type> MSG}
{<see> (pprin <l1> ... <ln>)}

{<p>
  When Lush prints an atom with function <pprin> or <pprint> it searches 
  for a method <pprint> before applying the hardcoded defaults.
}


#? (==> <obj> pretty)

{<type> MSG}
{<see> (pretty <f>)}

{<p>
  Function <pretty> displays an object by sending them a message <pretty>.
  The default method <pretty> defined by class <object> displays the slots
  of the object. Specific <pretty> methods are also defined for functions,
  symbols, classes, and so forth.
}

